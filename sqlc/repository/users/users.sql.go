// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTokensByUserId = `-- name: CreateTokensByUserId :one
INSERT INTO users_credentials  (user_id, access_token, refresh_token, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING access_token, refresh_token, expires_at
`

type CreateTokensByUserIdParams struct {
	UserID       uuid.UUID `json:"user_id"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

type CreateTokensByUserIdRow struct {
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateTokensByUserId(ctx context.Context, arg CreateTokensByUserIdParams) (CreateTokensByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, createTokensByUserId,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i CreateTokensByUserIdRow
	err := row.Scan(&i.AccessToken, &i.RefreshToken, &i.ExpiresAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, password_hash, full_name, mfa_enabled, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateUserParams struct {
	ID           uuid.UUID      `json:"id"`
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FullName     sql.NullString `json:"full_name"`
	MfaEnabled   sql.NullBool   `json:"mfa_enabled"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.MfaEnabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getTokensByUserId = `-- name: GetTokensByUserId :one
SELECT user_id, access_token, refresh_token, expires_at, encrypted_at, created_at, updated_at FROM users_credentials WHERE user_id = $1
`

func (q *Queries) GetTokensByUserId(ctx context.Context, userID uuid.UUID) (UsersCredential, error) {
	row := q.db.QueryRowContext(ctx, getTokensByUserId, userID)
	var i UsersCredential
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.EncryptedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, full_name, mfa_enabled, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT id, username, email, password_hash, full_name, mfa_enabled, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByUserID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.MfaEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTokensByUserId = `-- name: UpdateTokensByUserId :exec
UPDATE users_credentials
SET
    access_token = $2,
    refresh_token = $3,
    expires_at = $4
WHERE user_id = $1
`

type UpdateTokensByUserIdParams struct {
	UserID       uuid.UUID `json:"user_id"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) UpdateTokensByUserId(ctx context.Context, arg UpdateTokensByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTokensByUserId,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    username = $2,
    email = $3,
    password_hash = $4,
    full_name = $5,
    mfa_enabled = $6,
    updated_at = $7
WHERE id = $1
`

type UpdateUserParams struct {
	ID           uuid.UUID      `json:"id"`
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FullName     sql.NullString `json:"full_name"`
	MfaEnabled   sql.NullBool   `json:"mfa_enabled"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.MfaEnabled,
		arg.UpdatedAt,
	)
	return err
}
