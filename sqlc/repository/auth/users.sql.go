// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (amo_user_id, name, email, access_token, refresh_token, expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, amo_user_id, name, email, access_token, refresh_token, expires_at, created_at, updated_at
`

type CreateUserParams struct {
	AmoUserID    string         `json:"amo_user_id"`
	Name         sql.NullString `json:"name"`
	Email        sql.NullString `json:"email"`
	AccessToken  string         `json:"access_token"`
	RefreshToken string         `json:"refresh_token"`
	ExpiresAt    time.Time      `json:"expires_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.AmoUserID,
		arg.Name,
		arg.Email,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AmoUserID,
		&i.Name,
		&i.Email,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByAmoID = `-- name: GetUserByAmoID :one
SELECT id, amo_user_id, name, email, access_token, refresh_token, expires_at, created_at, updated_at FROM users WHERE amo_user_id = $1
`

func (q *Queries) GetUserByAmoID(ctx context.Context, amoUserID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAmoID, amoUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AmoUserID,
		&i.Name,
		&i.Email,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, amo_user_id, name, email, access_token, refresh_token, expires_at, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AmoUserID,
		&i.Name,
		&i.Email,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserTokens = `-- name: UpdateUserTokens :exec
UPDATE users
SET access_token = $2, refresh_token = $3, expires_at = $4, updated_at = NOW()
WHERE id = $1
`

type UpdateUserTokensParams struct {
	ID           uuid.UUID `json:"id"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) UpdateUserTokens(ctx context.Context, arg UpdateUserTokensParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTokens,
		arg.ID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	return err
}
